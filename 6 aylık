<!-- index.html -->
<!DOCTYPE html>
<html>
<head>
  <title>LocalStorage Example</title>
</head>
<body>
  <form id="myForm">
    <input type="text" id="name" placeholder="Name">
    <input type="email" id="email" placeholder="Email">
    <button type="submit">Submit</button>
  </form>
  <ul id="dataList"></ul>

    <script>
        // script.js
        const form = document.getElementById('myForm');
        const dataList = document.getElementById('dataList');

        form.addEventListener('submit', function (e) {
        e.preventDefault();
        
        const name = document.getElementById('name').value;
        const email = document.getElementById('email').value;
        
        const data = { name, email };
        localStorage.setItem('userData', JSON.stringify(data));

        // Update the data list
        updateDataList();
        
        // Clear the form
        form.reset();
        });

        function updateDataList() {
            const storedData = JSON.parse(localStorage.getItem('userData'));
            if (storedData) {
                dataList.innerHTML = `<li>
                    Name: ${storedData.name}, Email: ${storedData.email}
                    <button class="delete-btn" data-email="${storedData.email}">Delete</button>
                    </li>
                `;
                const deleteButtons = document.querySelectorAll('.delete-btn');
                deleteButtons.forEach(button => {
                    button.addEventListener('click', handleDelete);
                });
            }
        }

        function handleDelete(e) {
        const emailToDelete = e.target.getAttribute('data-email');
        const storedData = JSON.parse(localStorage.getItem('userData'));
        
        if (storedData && storedData.email === emailToDelete) {
            localStorage.removeItem('userData');
            updateDataList();
        }
        }

        // Call updateDataList on page load
        updateDataList();
        const myArray = ['Apple', 'Banana', 'Orange'];

        // Eleman eklemek
        myArray.push('Grapes');

        // Eleman çıkarmak
        const removedItem = myArray.pop();

        // Dizi üzerinde döngü ile işlem yapmak
        console.log('Array Elements:');
        for (let i = 0; i < myArray.length; i++) {
        console.log(myArray[i]);
        }

        // forEach döngüsü
        console.log('Array Elements using forEach:');
        myArray.forEach(item => {
        console.log(item);
        });

        // map fonksiyonu
        const upperCaseArray = myArray.map(item => item.toUpperCase());
        console.log('Array with Uppercase Elements:', upperCaseArray);

        // filter fonksiyonu
        const filteredArray = myArray.filter(item => item.includes('a'));
        console.log('Filtered Array:', filteredArray);

        const person = {
        firstName: 'John',
        lastName: 'Doe',
        age: 30,
        greet: function() {
            console.log(`Hello, my name is ${this.firstName} ${this.lastName}.`);
        }
        };

        // Özelliklere erişmek ve güncellemek
        console.log('First Name:', person.firstName);
        console.log('Age:', person['age']);
        person.age = 35;

        // Yeni bir metot ekleme
        person.sayHello = function() {
        console.log('Hello from person!');
        };

        // Metot çağırma
        person.greet();
        person.sayHello();

        try {
            // Hata oluşturma
            throw new Error('This is a custom error.');
        } catch (error) {
            console.error('An error occurred:', error.message);
        }

        fetch('https://jsonplaceholder.typicode.com/users')
        .then(response => response.json())
        .then(data => {
            console.log('Fetched Data:', data);
            // Veriyi ekrana yazdırmak için gerekli kodları ekleyebilirsiniz
        })
        .catch(error => {
            console.error('Fetch Error:', error);
        });

        


    </script>
</body>
</html>
